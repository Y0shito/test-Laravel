実装したいもの

フォロー機能改修
フォローページをリスト化しアンフォローボタンと説明文

記事編集中でページ離脱時アラート出す
→出せたが、プレビュー/下書き押しても出てしまう
→reactで記述が必要？

ブックマークの並び順をデフォルトで新しい順に

ページングに「最初へ」「最後へ」

---------------------
気になる点、直したい点

記事の公開/非公開をDBの値で制御しているが、URLでやられると直飛びする
何で制御するか、またはどう対策するか

ソートボタン、記事のカード部分などはコンポーネント化できそうか？

リレーション使ってる部分、値を渡す際withに置き換え出来てるか

articlesテーブルにブックマーク数入れるか？
ブックマーク数の計算が楽に、ただし、メソッド実装面倒かつ、実際のブックマークとの数に相違出る可能性あり？

ユーザー削除時の記事の扱い
①記事を残し名前も残す
②記事の存在は残すが、中身は消す（過去に存在したが消されたという旨で）
③存在そのものも消す

twitter登録だと名前がころころ変わる
→固定の名前欄作るか？

----------------------
疑問点

一つのアクションで複数のビューに値渡せるか

ビュー関数で複数の値を渡す際、配列で渡す？with?compact?
with使う場合、メリットは？

ルーティングの記述をパスからクラスにするか
→今はエラー出るのでしない

-------------------
実装済み

記事の削除時にダイアログ

退会処理
関連するデータも同時に削除

マイページでブックマーク・書いた記事・ユーザーフォローのタブによる切り替え
→bootstrapとjsで実現

記事入力後確認画面を経て投稿
→セッション？使う

ツイッター認証によるログイン
→TwitterDeveloperに登録が必要
Socialite導入

本文改行nl2br
更に詳細なバリデーション
タイトルには前後の空白削除

高度検索機能
複数検索、除外検索
複数語句可

詳細タグ、ただしユーザーが自由に入力出来るものではなく、
あらかじめこちらが用意してる中で選んでもらう
カテゴリ選ぶドロップダウンメニュー実装

ユーザーページ（擬似的に）
ユーザー名押したらそのユーザーのページに飛び、書いた記事や情報等
出てくる
→マイページのクエリ化して、自分のページはログインしてるかどうかで判断し、出来ることを変える
自分のページでなければ変更等出来ないようにすると同時に、なりすましでログインされて改竄されないように

マイページ内記事、BM等のページネーション（ただし書いた記事とブックマーク連動してしまう）

ユーザーフォロー機能
フォローしたらその人の新規投稿を確認出来る
→中間テーブル

マイページ自己紹介欄
新しくテーブルを作りUserとリレーションさせる

高度検索機能
本文・タイトル・タグ・著者による複合検索（絞り込み機能？）
→絞り込み検索

検索後のソート、ページネート
→postからgetにして@csrfを外し（外さないとURLにtoken出る）、URLのクエリで検索結果・語句を保持

----------------------
いつか導入したい機能

記事の文章内容に太字や斜体、リストなどを反映させる機能の実装
→WYSIWYGエディタを使う、TinyMCEとかCKEditor

人気記事紹介エリア
1日、1週間、1ヶ月、1年単位で

指摘フォーム
記事内容に大きな瑕疵がある場合指摘できるようにする
ただし恣意的、悪意ある内容を気軽に投稿出来ないよう敢えて不便にする
記事そのものが悪意的な場合は検索下位に、あるいは強制削除も考える

ユーザー評価システム
投稿した記事のブックマーク数等によってユーザーにランク付けし、
機能を開放していく機能
たとえば記事の指摘ができるようにしたりする

認可処理
ゲート処理によりログインしているユーザーでしか入れない/出来ない処理を作る
ひとまずマイページから

ページネート時、マイページ切替時にページ変遷なしに内容切り替え
->reactとaxiosによるajaxを使用

----------------------
次にすること

DBをMySQLへ

変数の統一、短縮ルール

Route::resource使う

Laravel/uiは非推奨らしい→breeze使う?

ログインやフォーム周りのセキュリティ強化

Faker/Factryやってみる

userpageとmypageの統合
表示はほぼ一緒で、ログイン中かつ自分自身のページの場合のみ
記事編集や設定見れるようにする

省コード化

DBの論理削除とそのカラム追加
Userとそのリレーション先であるArticle、Bookmark、Followも
同時に論理削除出来るように

ベストプラクティスに沿ったコーディング
コード規約、命名規則(PHP,Laravel,DB)
命名規則、キャメルケース等々統一

-------------------------
メモ

unittest:メリット少ない
docker:やっておいて損はない？
両方とも大規模開発で初めて行うもの、個人かつローカル開発では触る機会はない
いずれにせよやることの意義を分かってないとやる意味がない
今はしない

全文検索機能(ElasticSearch)
規模がでかくなれば導入すればいいが、小規模ではあまり意味ない？
なにより難儀
